#! /usr/bin/env python3
""" prints manpage info for flags """

import re
import subprocess as sp
import sys

# some ANSI color codes
RED = "\033[31m"
CYAN = "\033[94m"
NONE = "\033[0m"
GREEN = "\033[92m"
MAGENTA = "\033[95m"

# parse command-line arguments
if len(sys.argv) < 3:
    print("usage: fl <command> <flag(s)>")
    sys.exit(2)
command = sys.argv[1]
flags = sys.argv[2:]

# get and clean man page info
p1 = sp.Popen(["man", command], stdout=sp.PIPE, stderr=sp.PIPE)
p2 = sp.Popen(["col", "-b"], stdin=p1.stdout, stdout=sp.PIPE)
manpage = p2.communicate()[0].decode("utf-8")
if p1.stderr.peek():
    # quit if no man page entry for `command`
    # NOTE: can only check first subprocess standard error *after* waiting for
    # second child (done with `communicate`) to avoid deadlock (caused by
    # filled pipes in the case of long manpages)
    print(f"{RED}No man entry for '{MAGENTA}{command}{RED}'")
    sys.exit(1)

# print matches for each command-line flag
for i, flag in enumerate(flags):
    # format user input
    if flag[0] != '-':
        flag = '-' + flag

    # extract matches for flag
    p = re.compile(rf"""
            (?=\n\n                      # lookahead (0-width): accomadate match overlaps
                ([A-Z ]*\n)?             # match a section header (if flag is first listed)
                [\s\t]*({flag}[^\w].*?)  # match the flag itself
                \n\n([\s\t]*-|[A-Z])     # terminate match on next flag or next section
            )""", re.DOTALL | re.VERBOSE)
    matches = re.findall(p, manpage)

    # failure if no matches
    if not matches:
        print(f"    {RED}No matches for '{MAGENTA}{command} {flag}{RED}'")

    # pretty-print matches
    for match in matches:
        match = match[1].strip()[len(flag):]
        print(f"    {CYAN}{command} {GREEN}{flag}{NONE}{match}")

    # separate flags with newline
    if i != len(flags) - 1:
        print()
