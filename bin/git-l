#!/bin/bash
# An effortless git-log.  Get help with `git-l -h`

# if '--debug' given, print computed git-log command without running it
[[ $1 == '--debug' ]] && _debug=echo && shift

# default command if invoked with no other args
[[ $# -eq 0 ]] && ${_debug} git log --oneline --graph -10 && exit

opts=$1 && shift
usagestring="usage: git l [-h] <-ampsy> [args...]"

if [[ $opts == '-h' ]]; then
    echo \
"usage: git l [-h] <opstring> [args...]
---------------------------------------
Quick configuration of a git-log command.

git-l passes a default command to git-log that is modified by
options given in the <optstring> and additional arguments. The default
command is:

    > git log --oneline --graph

<opstring> can include any combination of the following options:
    -: no-op (skips optstring)
    a: display all refs                (+ --all)
    m: display full log messages       (- --oneline)
    p: display diff output             (+ --patch)
    s: generate diffstat               (+ --stat)
    y: linear (non-graphical) display  (- --graph)

Any arguments given as [args...] are then appended to the modified default
command, which is then passed to git-log. If <-h> is given, git-l will display
this message and exit. If invoked without an optstring, the resulting output is limited to
10 commits (i.e. '-10' is appended to the default command).

For scripting and debugging: if '--debug' is given as the first parameter, git-l will
print to stdout the generated git-log command without executing it"
    exit 0
fi

[[ $opts =~ .*[^-ampsy].* ]] && echo "$usagestring" && exit
[[ $opts =~ .*-.* ]]                        # -: no-op for skipping optstring
[[ $opts =~ .*a.* ]] && _a="--all"          # a: display all refs
[[ $opts =~ .*m.* ]] || _m='--oneline'      # m: display full log messages
[[ $opts =~ .*p.* ]] && _p='-p'             # p: display diff output
[[ $opts =~ .*s.* ]] && _s='--stat'         # s: generate diffstat
[[ $opts =~ .*y.* ]] || _y="--graph"        # y: linear (non-graph) display

${_debug} git log $_a $_l $_m $_p $_s $_y "$@"
