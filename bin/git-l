#!/bin/bash
# An effortless git-log.  Get help with `git-l -h`

# if '--debug' given, print computed git-log command without running it
[[ $1 == '--debug' ]] && _debug=echo && shift

# default command if invoked with no other args
[[ $# -eq 0 ]] && ${_debug} git log --oneline --graph -10 && exit

opts=$1 && shift
usagestring="usage: git l [-h] <-acfpsy> [args...]"

if [[ $opts == '-h' ]]; then
    echo \
"usage: git l [-h] <optstring> [args...]
---------------------------------------
Quick configuration of a git-log command.

git-l passes a default command to git-log that is modified by
options given in the <optstring> and additional arguments. The default
command is:

    > git log --oneline --graph

<optstring> can include any combination of the following options in any order:
    -: no-op (skips optstring)
    a: display all refs                (+ --all)
    c: cut output to 10 commits        (+ --max-count=10)
    f: display full log messages       (- --oneline)
    p: display diff output             (+ --patch)
    s: generate diffstat               (+ --stat)
    y: linear (non-graphical) display  (- --graph)

Any arguments given as [args...] are then appended to the modified default
command, which is then passed to git-log. If <-h> is given, git-l will display
this message and exit. If invoked without an optstring, the resulting output
is limited to 10 commits (i.e. '-10' is appended to the default command).

For scripting and debugging: if '--debug' is given as the first parameter,
git-l will print the generated git-log command to stdout without executing it"
    exit 0
fi

[[ $opts =~ .*[^-acfpsy0-9].* ]] && echo "$usagestring" && exit
[[ $opts =~ .*a.* ]] && _a="--all"
[[ $opts =~ .*c.* ]] && _c="-n 10"
[[ $opts =~ .*f.* ]] || _f="--oneline"
[[ $opts =~ .*p.* ]] && _p="-p"
[[ $opts =~ .*s.* ]] && _s="--stat"
[[ $opts =~ .*y.* ]] || _y="--graph"

${_debug} git log $_a $_c $_f $_p $_s $_y "$@"
